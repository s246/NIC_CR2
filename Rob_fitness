#travelling Thief

#takes: Tuple(TSP order, Knapsack selection)
#returns: total time on TSP to collect knapsack items

#knapsack value -> has been integrated into Travelling Thief
#takes: knapsack selection
#returns: value of items in knapsack
from euclidean_distance import e_distance

#Traveling Thief(TSP,Knapsack)
def travelling_thief(check):
    TSP = check[0]
    #it is assumed TSP begins at node 1
    #if not, please contact the person who provided the TSP!
    #TSP = [1,x,y,...,a,b]
    #len(TSP) = len(nodes_df)
    knapsack = check[1]

    bag_locations = [[]]
    from file_read import read_data
    dict_constants, nodes_df, items_df = read_data('a280-n279.txt')

    for i in range (int(dict_constants['DIMENSION'])):
        bag_locations.append([])
    #look through all bags
    for i in range (len(items_df)):
    #assign to position in array which node they are at
        bag_locations[items_df['assigned_node'][i]].append(i)
    #this will give a 2D array with an empty 1 index (node 1 has no items)
    #also an empty 0 index (node 0 does not exist)

    bag_weight = 0
    total_value = 0
    time = 0
    #for len(TSP solution)
    for i in range(len(TSP)):
        #if current node is not last in TSP solution
        if i < (len(TSP)-1):
            #find distance from node just visited to new node
            j = TSP[i]-1
            point1 = [TSP[i],nodes_df['x_coor'][j],nodes_df['y_coor'][j]]
            k = TSP[(i+1)]-1
            point2 = [TSP[k],nodes_df['x_coor'][k],nodes_df['y_coor'][k]]
            #speed = 1-(weight of bag/max bag weight)
            speed = 1 - (bag_weight/dict_constants['CAPACITY OF KNAPSACK'])
            if (bag_weight/dict_constants['CAPACITY OF KNAPSACK'])>1:
                return 9999999999999999999999,0
            #if speed < min speed
            if speed < dict_constants['MIN SPEED']:
                #speed = min speed
                speed = dict_constants['MIN SPEED']
            #time = distance*(1/speed)
            time += e_distance(point1,point2)*(1/speed)

            #for len(items at new node)
            items_at_location = bag_locations[TSP[i+1]]
            for j in range(len(items_at_location)):
                #check if item taken
                if knapsack[items_at_location[j]] == 1:
                    #if item taken
                    #add item weight to weight of bag
                    bag_weight += items_df['weight'][items_at_location[j]]
                    #add item value to total value
                    total_value += items_df['profit'][items_at_location[j]]

        #else
        else:
            #find distance from node just visited to new node
            j = TSP[i]-1
            point1 = [TSP[i],nodes_df['x_coor'][j],nodes_df['y_coor'][j]]
            k = TSP[0]-1
            point2 = [TSP[k],nodes_df['x_coor'][k],nodes_df['y_coor'][k]]
            #speed = 1-(weight of bag/max bag weight)
            speed = 1 - (bag_weight/dict_constants['CAPACITY OF KNAPSACK'])
            if (bag_weight/dict_constants['CAPACITY OF KNAPSACK'])>1:
                return 9999999999999999999999,0
            #if speed < min speed
            if speed < dict_constants['MIN SPEED']:
                #speed = min speed
                speed = dict_constants['MIN SPEED']
            #time = distance*(1/speed)
            time += e_distance(point1,point2)*(1/speed)

    #return time, total value
    return time, total_value

#fitness function(TSP, Knapsack)
def fitness_function(to_check):
    #time, value = Travelling Thief(TSP,Knapsack)
    total_time, profit = travelling_thief(to_check)
    #f = time - value
    f = total_time - profit
    #return f
    return f
